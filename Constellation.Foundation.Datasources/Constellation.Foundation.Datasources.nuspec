<?xml version="1.0"?>
<package >
  <metadata>
	<id>$id$</id>
	<version>$version$</version>
	<title>$title$</title>
	<authors>Richard J. Cabral</authors>
	<owners>Richard J. Cabral</owners>
	<license type="expression">MIT</license>
	<projectUrl>https://constellation4sitecore.com/foundation-datasources/</projectUrl>
	<repository type="git" url="https://github.com/constellation4sitecore/constellation-sitecore9.git"/>
	<requireLicenseAcceptance>false</requireLicenseAcceptance>
	<iconUrl>https://constellation4sitecore.com/wp-content/uploads/2019/04/Constellation.png</iconUrl>
	<summary>Sitecore Helix library for classifying content based on whether the content is a page, a page fragment, and/or reusable.</summary>
	<description>
VERSION 9.1 is compiled for Sitecore 9.1 use and will not work on earlier versions.
Requires Sitecore 9.1
Requires .NET 4.7.1

Constellation is a collection of utilities for .NET CMS implementers.
The Foundation.Datasources library is an opinionated information architecture for Sitecore. It includes "base" templates and Item
information rules to enforce the architecture.

Core Architecture Concept:
Web Site Items are one of the following types:

Context Datasource: A "page" Item in Sitecore, has a URL, has presentation, loads a Layout and has placeholders for additional Renderings.

Subcontent: A "page fragment" Item in Sitecore, specifically an Item designed to be used as the DataSource for a Rendering. It is required
for the Rendering to render. Subcontent is optional page content, but is unique to the page it appears on.

Widget: Also a "page fragment" Item in Sitecore, specifically an Item designed to be used as the DataSource for a Rendering. It is required for the Rendering to render. Widgets are optional page content, but are designed to be shared by multiple pages.


The primary information architecture for this design involves the storage of SubContent vs Widgets. All Pages on a site should get a _subcontent folder beneath them which is where Items of type Subcontent should be stored. This allows for Renderings to specify their Datasource location as "./_subcontent"

Widgets should be stored beneath the /tenant/site node (using Helix methodology) typically in a /widgets folder, possibly broken up by widget type or marketing intentions.

You can use the following Rule Conditions to enforce this Information Architecture:
* ItemIsContextDatasource
* Item IsSubcontentDatasource
* ItemIsWidgetDatasource
* ItemSupportsSubcontent (in some cases Pages should not support subcontent, for example, wildcard pages or pages imported from an external system)

You can use the following Rule Actions to enforce this Information Architecture:
* CreateSubcontentFolder

In general you need a rule like this:

On Item Saved, if the Item Supports Subcontent, Create a Subcontent Folder (if none exists) An example is provided in the attached package.

After setting up this rule, ensure that your Renderings are organized into Widgets and Subcontent with appropriate Datasources established.


Installation:
Add this NuGet package to a Web Application project. After building and deploying, this library will automatically install the Sitecore package containing the necessary rules and templates to support this architecture.
	</description>
	<releaseNotes>Updated to support Sitecore 9.1.1</releaseNotes>
	<copyright>Copyright 2017</copyright>
	<tags>Sitecore,  Sitecore Helix, Sitecore Foundation</tags>
  </metadata>
</package>